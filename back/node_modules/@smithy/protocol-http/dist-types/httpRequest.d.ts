<<<<<<< HEAD
<<<<<<<< HEAD:back/node_modules/@smithy/protocol-http/dist-types/httpRequest.d.ts
import { HeaderBag, HttpMessage, HttpRequest as IHttpRequest, QueryParameterBag, URI } from "@smithy/types";
========
import { HeaderBag, HttpMessage, HttpRequest as IHttpRequest, QueryParameterBag, URI } from "@aws-sdk/types";
>>>>>>>> origin/desarrollo:back/node_modules/@aws-sdk/protocol-http/dist-types/httpRequest.d.ts
type HttpRequestOptions = Partial<HttpMessage> & Partial<URI> & {
    method?: string;
};
export interface HttpRequest extends IHttpRequest {
}
export declare class HttpRequest implements HttpMessage, URI {
=======
import { Endpoint, QueryParameterBag } from "@smithy/types";
import { HeaderBag, HttpMessage } from "./types";
type HttpRequestOptions = Partial<HttpMessage> & Partial<Endpoint> & {
    method?: string;
};
/**
 * @public
 *
 * Interface an HTTP request class. Contains
 * addressing information in addition to standard message properties.
 */
export interface HttpRequest extends HttpMessage, Endpoint {
    method: string;
}
export declare class HttpRequest implements HttpMessage, Endpoint {
>>>>>>> origin/desarrollo
    method: string;
    protocol: string;
    hostname: string;
    port?: number;
    path: string;
    query: QueryParameterBag;
    headers: HeaderBag;
<<<<<<< HEAD
    username?: string;
    password?: string;
    fragment?: string;
=======
>>>>>>> origin/desarrollo
    body?: any;
    constructor(options: HttpRequestOptions);
    static isInstance(request: unknown): request is HttpRequest;
    clone(): HttpRequest;
}
export {};
